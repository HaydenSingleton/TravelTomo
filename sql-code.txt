# Create sqlalchemy engine for connecting sql server
if sqlenabled:
    try:
        quoted = parse.quote_plus('DRIVER={};Server={};Database={};UID={};PWD={};TDS_Version=8.0;Port=1433;'.format("ODBC Driver 13 for SQL Server", "sql-stg-sc-travel.civfwvdbx0g6.ap-southeast-1.rds.amazonaws.com", "tripAdvisor", "traveltomo", "traveltomo123"))
        engine = sqlalchemy.create_engine('mssql+pyodbc:///?odbc_connect={}'.format(quoted))
    except Exception as e:
        print("\nFailed to connect to sql server\n", e)

    for place in queries:

        hotels_df, resturants_df, attractions_df = search(place)

        # Append collected data to the table for Hotels, Resturants, and Attractions respectively
        hotels_df.to_sql("Hotels", con=engine, if_exists="replace", index=False,
                        dtype={"Title": sqlalchemy.types.NVARCHAR(200),
                                "Rating": sqlalchemy.types.NVARCHAR(200),
                                "Review Count": sqlalchemy.types.NVARCHAR(200),
                                "Phone Number": sqlalchemy.types.NVARCHAR(200),
                                "Address": sqlalchemy.types.NVARCHAR(200),
                                "Locality": sqlalchemy.types.NVARCHAR(200),
                                "Country": sqlalchemy.types.NVARCHAR(200),
                                "Stars": sqlalchemy.types.NVARCHAR(255),
                                "User Reviews": sqlalchemy.types.NVARCHAR(200),
                                "Keywords": sqlalchemy.types.NVARCHAR(200),
                                "Date Generated": sqlalchemy.types.NVARCHAR(200)
                                })

        resturants_df.to_sql("Resturants", con=engine, if_exists="replace", index=False,
                            dtype={"Title": sqlalchemy.types.NVARCHAR(200),
                                    "Rating": sqlalchemy.types.NVARCHAR(200),
                                    "Review Count": sqlalchemy.types.NVARCHAR(200),
                                    "Phone Number": sqlalchemy.types.NVARCHAR(200),
                                    "Address": sqlalchemy.types.NVARCHAR(200),
                                    "Locality": sqlalchemy.types.NVARCHAR(200),
                                    "Country": sqlalchemy.types.NVARCHAR(200),
                                    "Cusines": sqlalchemy.types.NVARCHAR(200),
                                    "Date Generated": sqlalchemy.types.NVARCHAR(200)
                                    })

        attractions_df.to_sql("Attractions", con=engine, if_exists="replace", index=False,
                            dtype={"Title": sqlalchemy.types.NVARCHAR(200),
                                    "Rating": sqlalchemy.types.NVARCHAR(200),
                                    "Review Count": sqlalchemy.types.NVARCHAR(200),
                                    "Phone Number": sqlalchemy.types.NVARCHAR(200),
                                    "Address": sqlalchemy.types.NVARCHAR(200),
                                    "Locality": sqlalchemy.types.NVARCHAR(200),
                                    "Country": sqlalchemy.types.NVARCHAR(200),
                                    "Suggested Duration": sqlalchemy.types.NVARCHAR(200),
                                    "Price": sqlalchemy.types.NVARCHAR(200),
                                    "Description": sqlalchemy.types.NVARCHAR(200),
                                    "User Reviews": sqlalchemy.types.NVARCHAR(200),
                                    "Keywords": sqlalchemy.types.NVARCHAR(200),
                                    "Date Generated": sqlalchemy.types.NVARCHAR(200)
                                    })